import { pgTable, text, serial, integer, boolean, timestamp, jsonb } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

// Base user schema
export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  email: text("email").notNull().unique(),
  password: text("password").notNull(),
  name: text("name").notNull(),
  phone: text("phone"),
  isEmailVerified: boolean("is_email_verified").default(false),
  agreeTerms: boolean("agree_terms").notNull().default(false),
  agreePrivacy: boolean("agree_privacy").notNull().default(false),
  agreeMarketing: boolean("agree_marketing").default(false),
  role: text("role"),
  bio: text("bio"),
  imageUrl: text("image_url"),
  tokens: integer("tokens").default(1000),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// User experiences
export const experiences = pgTable("experiences", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull().references(() => users.id),
  title: text("title").notNull(),
  role: text("role").notNull(),
  startDate: text("start_date").notNull(),
  endDate: text("end_date").notNull(),
  achievement: text("achievement"),
  tags: text("tags").array().notNull(),
  createdAt: timestamp("created_at").defaultNow(),
});

// Portfolio items generated by AI
export const portfolioItems = pgTable("portfolio_items", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull().references(() => users.id),
  title: text("title").notNull(),
  description: text("description").notNull(),
  proficiency: integer("proficiency").notNull(),
  type: text("type").notNull(), // 'strength' or 'developing'
  createdAt: timestamp("created_at").defaultNow(),
});

// Recommended team members
export const recommendedUsers = pgTable("recommended_users", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull().references(() => users.id),
  targetUserId: integer("target_user_id").notNull().references(() => users.id),
  match: integer("match").notNull(),
  status: text("status").default("pending"), // 'pending', 'accepted', 'rejected'
  createdAt: timestamp("created_at").defaultNow(),
});

// Chat messages
export const messages = pgTable("messages", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull().references(() => users.id),
  content: text("content").notNull(),
  isUser: boolean("is_user").notNull(),
  chart: jsonb("chart"),
  timestamp: timestamp("timestamp").defaultNow(),
});

// Job postings
export const jobPostings = pgTable("job_postings", {
  id: serial("id").primaryKey(),
  title: text("title").notNull(),
  company: text("company").notNull(),
  location: text("location").notNull(),
  type: text("type").notNull(),
  description: text("description").notNull(),
  skills: text("skills").array().notNull(),
  createdAt: timestamp("created_at").defaultNow(),
});

// User-job matches
export const jobMatches = pgTable("job_matches", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull().references(() => users.id),
  jobId: integer("job_id").notNull().references(() => jobPostings.id),
  match: integer("match").notNull(),
  status: text("status").default("new"), // 'new', 'saved', 'applied'
  createdAt: timestamp("created_at").defaultNow(),
});

// Token transactions
export const tokenTransactions = pgTable("token_transactions", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull().references(() => users.id),
  title: text("title").notNull(),
  amount: integer("amount").notNull(),
  date: timestamp("date").defaultNow(),
});

// Available services
export const services = pgTable("services", {
  id: serial("id").primaryKey(),
  title: text("title").notNull(),
  cost: integer("cost").notNull(),
  icon: text("icon").notNull(),
  description: text("description"),
});

// Insert schemas
export const insertUserSchema = createInsertSchema(users).omit({ id: true });
export const insertExperienceSchema = createInsertSchema(experiences).omit({ id: true, createdAt: true });
export const insertPortfolioItemSchema = createInsertSchema(portfolioItems).omit({ id: true, createdAt: true });
export const insertRecommendedUserSchema = createInsertSchema(recommendedUsers).omit({ id: true, createdAt: true });
export const insertMessageSchema = createInsertSchema(messages).omit({ id: true, timestamp: true });
export const insertJobPostingSchema = createInsertSchema(jobPostings).omit({ id: true, createdAt: true });
export const insertJobMatchSchema = createInsertSchema(jobMatches).omit({ id: true, createdAt: true });
export const insertTokenTransactionSchema = createInsertSchema(tokenTransactions).omit({ id: true, date: true });
export const insertServiceSchema = createInsertSchema(services).omit({ id: true });

// Types
export type User = typeof users.$inferSelect;
export type InsertUser = z.infer<typeof insertUserSchema>;

export type Experience = typeof experiences.$inferSelect;
export type InsertExperience = z.infer<typeof insertExperienceSchema>;

export type PortfolioItem = typeof portfolioItems.$inferSelect;
export type InsertPortfolioItem = z.infer<typeof insertPortfolioItemSchema>;

export type RecommendedUser = typeof recommendedUsers.$inferSelect;
export type InsertRecommendedUser = z.infer<typeof insertRecommendedUserSchema>;

export type Message = typeof messages.$inferSelect;
export type InsertMessage = z.infer<typeof insertMessageSchema>;

export type JobPosting = typeof jobPostings.$inferSelect;
export type InsertJobPosting = z.infer<typeof insertJobPostingSchema>;

export type JobMatch = typeof jobMatches.$inferSelect;
export type InsertJobMatch = z.infer<typeof insertJobMatchSchema>;

export type TokenTransaction = typeof tokenTransactions.$inferSelect;
export type InsertTokenTransaction = z.infer<typeof insertTokenTransactionSchema>;

export type Service = typeof services.$inferSelect;
export type InsertService = z.infer<typeof insertServiceSchema>;
